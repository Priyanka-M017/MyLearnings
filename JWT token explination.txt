Generate the JWT token :
1.The client will 1st make a post request to the /autenticate endpoint with the user name and password passed in request body.
2.This request now will be intercepted by filter called FilterOfJwt which extends the oncePerRequestFilter, this is a spring security configuration class with will garuntees that all the incoming request are intercepted only once.
in this step we will check authorizationHeader is not null and has startsWith Bearer or not. if yes we will validate the token or else will thrown autenticate required error.

3. After intercepting the request, it will check if the header has the JWT or not. if not we will call the generateToken() method with /autenticate mapping as it has the username details. the generateToken will get the user details 
from the requestbody and passes it to the Authentication Manager which is a spring security configuration class, the Authentication Manager then calls the our UserDetailService class which implements the UserDetailService to get the username and password from the database with the help of overridden method loadUserByUserName with will return the userDetails if found else it will through usenotFoundException.
4. Authentication Manager now compare the username details provided by the user and the details from the database. if Authentication is success it returns true else it returns invalid user exception.
5. If we receive the Authentication is sucuessfull we call the generateToken(userDetails) method of jwtTokenUtil class with the userDetails to generate the token.
6. This token is now return back to the client

Validating the token:
1.The client will make a class a our service with the JWT token in the header
2.This API request now will be intercepted by filter called FilterOfJwt which extends the oncePerRequestFilter.  It will check if it has jwt token in the request or not if it has token then it will extract the token and gets the userdetails from the database by calling UserDetailService class which implements the UserDetailService interface.
3. Once the it got the userDetails from the database it will validate the token if it has the right user details or not 
in the FilterOfJwt class which extends the oncePerRequestFilter, will override the doFilterInternal method which will accepts request, response and Filter chain as arguments.
We will now check if authorizationHeader is not null and has startsWith Bearer or not. then we will check if the username is not null.
4.if it is validate the autentication is sucuessfull.
5.The service will be called and gets the response back

There will be a JWTFilterClass which extends the oncePerRequestFilter which will have the code to check if the request has jwt or not, if yes it will validate the token else it will thrown autenticate required error.
There will be a JWT utility class which will have the code to extractUsername, generateToken, createToken, validateToken.

in createToken we will set the issued time and setExpiration time by setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY).compact()




JWT :


Jwt is a json web token, this is one of the best secure way to communicate between client and server.

Advantages:
It completely follows script less authentication mechanism, it means all the user imput or user state will never store in server memory or cokkies.

Why jwt?
In order to securely access any api from server side, we have to pass username and password, everytime we sends the request which is tedious. In order to minimize this effort, we can use jwt

Add the dependecies for JWT (jjwt) and jaxb-api it is library that enables to create JWTs and also validate existing jwts

If we are using java 9 then we have to use jaxb-api dependency also, as java 9 oe any newer doesn't have jaxb dependencies within the jdk.


JWT implementation :
Step 1: we haved to create a class utilJwt class where the JWT token is generatingToken and creatingToken by getting the username and password

Step 2: Create a pojo class which accepts userName and password as Authenciation request

Step3: Create a another pojo class which gives the jwt token as Authenciation response

Step4: create a post method /authentication in ur controller class which accepts the input and and generates the jwt token

Refer to Spring-security-jwt project in eclipse

The above steps forms only jwt token, now we have to tell the spring to listen to every request which header has a Bearer token, extract the userdetails and refer if it is a valide jwt, if yes calls the method and sends the response 

For this intercepting every request to validate the jwt token, filter are required.

So we create a filter class, this is a filter that is going to intercept every request just once and then examine the header right so I'm going to have this intercept every request only once by extending the right filter called OncePerRequestFilter to create name for a filter that runs once per request/ This is the filter that I'm going to be extending here there's a method called doFilterInternal.

Step2: 
This method which actually does the job, this method takes a bunch of arguments which are request, response and a filter because
it has the option of passing on to the
next filter in the filter chain or
actually ending the request right there
what it needs to do is to examine the
incoming requests for the JWT in the
header right it's going to look at the
right header and see if that JWT is
valid if it finds a valid readability
it's gonna get the user details out of
the user detailed service and save it in
the security context this is all that
this filter needs 
